{"version":3,"file":"regression_slope_validator.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/validator/regression_slope_validator.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;;AAEH,wCAAiE;AAGjE,4CAAuC;AACvC,4CAAuC;AAEvC;;;GAGG;AAEH,IAAa,wBAAwB,gCAArC,8BAAsC,SAAQ,qBAAS;IAYrD,YAC0D,WAAmB,EACxB,OAAe;QAClE,KAAK,EAAE,CAAC;QAFgD,gBAAW,GAAX,WAAW,CAAQ;QACxB,YAAO,GAAP,OAAO,CAAQ;IAEpE,CAAC;IAED,QAAQ;QACN,MAAM,CAAC,EAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAE,uBAAuB,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC;IACjF,CAAC;IAED,QAAQ,CAAC,cAA+B;QACtC,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9C,MAAM,YAAY,GACd,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;YAC1F,MAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,MAAM,OAAO,GAAa,EAAE,CAAC;YAC7B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC7C,mDAAmD;gBACnD,oEAAoE;gBACpE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAChB,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YACrD,CAAC;YACD,MAAM,eAAe,GAAG,qBAAS,CAAC,wBAAwB,CACtD,OAAO,EAAE,qBAAS,CAAC,aAAa,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,qBAAS,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC;YAC1F,MAAM,CAAC,eAAe,IAAI,CAAC,GAAG,YAAY,GAAG,IAAI,CAAC;QACpD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AAxCQ,oCAAW,GAAG,IAAI,qBAAc,CAAC,qCAAqC,CAAC,CAAC;AACxE,+BAAM,GAAG,IAAI,qBAAc,CAAC,iCAAiC,CAAC,CAAC;AAC/D,kCAAS,GAAG;IACjB;QACE,OAAO,EAAE,0BAAwB;QACjC,IAAI,EAAE,CAAC,0BAAwB,CAAC,WAAW,EAAE,0BAAwB,CAAC,MAAM,CAAC;KAC9E;IACD,EAAC,OAAO,EAAE,0BAAwB,CAAC,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAC;IAC7D,EAAC,OAAO,EAAE,0BAAwB,CAAC,MAAM,EAAE,QAAQ,EAAE,YAAY,EAAC;CACnE,CAAC;AAVS,wBAAwB;IADpC,iBAAU,EAAE;IAcN,WAAA,aAAM,CAAC,0BAAwB,CAAC,WAAW,CAAC,CAAA;IAC5C,WAAA,aAAM,CAAC,0BAAwB,CAAC,MAAM,CAAC,CAAA;;GAdjC,wBAAwB,CAyCpC;AAzCY,4DAAwB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {MeasureValues} from '../measure_values';\nimport {Statistic} from '../statistic';\nimport {Validator} from '../validator';\n\n/**\n * A validator that checks the regression slope of a specific metric.\n * Waits for the regression slope to be >=0.\n */\n@Injectable()\nexport class RegressionSlopeValidator extends Validator {\n  static SAMPLE_SIZE = new InjectionToken('RegressionSlopeValidator.sampleSize');\n  static METRIC = new InjectionToken('RegressionSlopeValidator.metric');\n  static PROVIDERS = [\n    {\n      provide: RegressionSlopeValidator,\n      deps: [RegressionSlopeValidator.SAMPLE_SIZE, RegressionSlopeValidator.METRIC]\n    },\n    {provide: RegressionSlopeValidator.SAMPLE_SIZE, useValue: 10},\n    {provide: RegressionSlopeValidator.METRIC, useValue: 'scriptTime'}\n  ];\n\n  constructor(\n      @Inject(RegressionSlopeValidator.SAMPLE_SIZE) private _sampleSize: number,\n      @Inject(RegressionSlopeValidator.METRIC) private _metric: string) {\n    super();\n  }\n\n  describe(): {[key: string]: any} {\n    return {'sampleSize': this._sampleSize, 'regressionSlopeMetric': this._metric};\n  }\n\n  validate(completeSample: MeasureValues[]): MeasureValues[]|null {\n    if (completeSample.length >= this._sampleSize) {\n      const latestSample =\n          completeSample.slice(completeSample.length - this._sampleSize, completeSample.length);\n      const xValues: number[] = [];\n      const yValues: number[] = [];\n      for (let i = 0; i < latestSample.length; i++) {\n        // For now, we only use the array index as x value.\n        // TODO(tbosch): think about whether we should use time here instead\n        xValues.push(i);\n        yValues.push(latestSample[i].values[this._metric]);\n      }\n      const regressionSlope = Statistic.calculateRegressionSlope(\n          xValues, Statistic.calculateMean(xValues), yValues, Statistic.calculateMean(yValues));\n      return regressionSlope >= 0 ? latestSample : null;\n    } else {\n      return null;\n    }\n  }\n}\n"]}