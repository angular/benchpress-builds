{"version":3,"file":"sampler.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/sampler.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, StaticProvider} from '@angular/core';\n\nimport {Options} from './common_options';\nimport {MeasureValues} from './measure_values';\nimport {Metric} from './metric';\nimport {Reporter} from './reporter';\nimport {Validator} from './validator';\nimport {WebDriverAdapter} from './web_driver_adapter';\n\n\n/**\n * The Sampler owns the sample loop:\n * 1. calls the prepare/execute callbacks,\n * 2. gets data from the metric\n * 3. asks the validator for a valid sample\n * 4. reports the new data to the reporter\n * 5. loop until there is a valid sample\n */\n@Injectable()\nexport class Sampler {\n  static PROVIDERS = <StaticProvider[]>[{\n    provide: Sampler,\n    deps: [\n      WebDriverAdapter, Metric, Reporter, Validator, Options.PREPARE, Options.EXECUTE, Options.NOW\n    ]\n  }];\n  constructor(\n      private _driver: WebDriverAdapter, private _metric: Metric, private _reporter: Reporter,\n      private _validator: Validator, @Inject(Options.PREPARE) private _prepare: Function,\n      @Inject(Options.EXECUTE) private _execute: Function,\n      @Inject(Options.NOW) private _now: Function) {}\n\n  sample(): Promise<SampleState> {\n    const loop = (lastState: SampleState): Promise<SampleState> => {\n      return this._iterate(lastState).then((newState) => {\n        if (newState.validSample != null) {\n          return newState;\n        } else {\n          return loop(newState);\n        }\n      });\n    };\n    return loop(new SampleState([], null));\n  }\n\n  private _iterate(lastState: SampleState): Promise<SampleState> {\n    let resultPromise: Promise<SampleState|null>;\n    if (this._prepare !== Options.NO_PREPARE) {\n      resultPromise = this._driver.waitFor(this._prepare);\n    } else {\n      resultPromise = Promise.resolve(null);\n    }\n    if (this._prepare !== Options.NO_PREPARE || lastState.completeSample.length === 0) {\n      resultPromise = resultPromise.then((_) => this._metric.beginMeasure());\n    }\n    return resultPromise.then((_) => this._driver.waitFor(this._execute))\n        .then((_) => this._metric.endMeasure(this._prepare === Options.NO_PREPARE))\n        .then((measureValues) => this._report(lastState, measureValues));\n  }\n\n  private _report(state: SampleState, metricValues: {[key: string]: any}): Promise<SampleState> {\n    const measureValues = new MeasureValues(state.completeSample.length, this._now(), metricValues);\n    const completeSample = state.completeSample.concat([measureValues]);\n    const validSample = this._validator.validate(completeSample);\n    let resultPromise = this._reporter.reportMeasureValues(measureValues);\n    if (validSample != null) {\n      resultPromise =\n          resultPromise.then((_) => this._reporter.reportSample(completeSample, validSample));\n    }\n    return resultPromise.then((_) => new SampleState(completeSample, validSample));\n  }\n}\n\nexport class SampleState {\n  constructor(public completeSample: MeasureValues[], public validSample: MeasureValues[]|null) {}\n}\n"]}