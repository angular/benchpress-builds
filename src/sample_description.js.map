{"version":3,"file":"sample_description.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/sample_description.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAIH,qDAAyC;AACzC,qCAAgC;AAChC,2CAAsC;AAGtC;;GAEG;AACH;IAoBE,YACW,EAAU,EAAE,YAAyC,EACrD,OAA6B;QAD7B,OAAE,GAAF,EAAE,CAAQ;QACV,YAAO,GAAP,OAAO,CAAsB;QACtC,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,YAAY,CAAC,OAAO,CAAC,WAAW;YAC9B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,IAAI,MAAM,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM,KAAK,MAAM,CAAC,EAAC,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,aAAa,EAAE,IAAI,CAAC,WAAW,EAAE,SAAS,EAAE,IAAI,CAAC,OAAO,EAAC,CAAC,CAAC,CAAC;;AA5BvF,2BAAS,GAAG,CAAC;QAClB,OAAO,EAAE,iBAAiB;QAC1B,UAAU,EACN,CAAC,MAAc,EAAE,EAAU,EAAE,OAAgB,EAAE,SAAiB,EAAE,SAAoB,EACrF,WAAoC,EAAE,QAAiC,KACpE,IAAI,iBAAiB,CACjB,EAAE,EACF;YACE,EAAC,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAC,EAAE,SAAS,CAAC,QAAQ,EAAE,EAAE,WAAW;YAC/E,QAAQ;SACT,EACD,MAAM,CAAC,QAAQ,EAAE,CAAC;QAC9B,IAAI,EAAE;YACJ,eAAM,EAAE,wBAAO,CAAC,SAAS,EAAE,wBAAO,CAAC,QAAQ,EAAE,wBAAO,CAAC,UAAU,EAAE,qBAAS;YAC1E,wBAAO,CAAC,mBAAmB,EAAE,wBAAO,CAAC,kBAAkB;SACxD;KACF,CAAC,CAAC;AAjBL,8CA8BC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\n\nimport {Options} from './common_options';\nimport {Metric} from './metric';\nimport {Validator} from './validator';\n\n\n/**\n * SampleDescription merges all available descriptions about a sample\n */\nexport class SampleDescription {\n  static PROVIDERS = [{\n    provide: SampleDescription,\n    useFactory:\n        (metric: Metric, id: string, forceGc: boolean, userAgent: string, validator: Validator,\n         defaultDesc: {[key: string]: string}, userDesc: {[key: string]: string}) =>\n            new SampleDescription(\n                id,\n                [\n                  {'forceGc': forceGc, 'userAgent': userAgent}, validator.describe(), defaultDesc,\n                  userDesc\n                ],\n                metric.describe()),\n    deps: [\n      Metric, Options.SAMPLE_ID, Options.FORCE_GC, Options.USER_AGENT, Validator,\n      Options.DEFAULT_DESCRIPTION, Options.SAMPLE_DESCRIPTION\n    ]\n  }];\n  description: {[key: string]: any};\n\n  constructor(\n      public id: string, descriptions: Array<{[key: string]: any}>,\n      public metrics: {[key: string]: any}) {\n    this.description = {};\n    descriptions.forEach(description => {\n      Object.keys(description).forEach(prop => { this.description[prop] = description[prop]; });\n    });\n  }\n\n  toJson() { return {'id': this.id, 'description': this.description, 'metrics': this.metrics}; }\n}\n"]}