{"version":3,"file":"statistic.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/statistic.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH;IACE,MAAM,CAAC,+BAA+B,CAAC,MAAgB,EAAE,IAAY;QACnE,MAAM,CAAC,SAAS,CAAC,0BAA0B,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,IAAI,GAAG,GAAG,CAAC;IACzE,CAAC;IAED,MAAM,CAAC,aAAa,CAAC,OAAiB;QACpC,IAAI,KAAK,GAAG,CAAC,CAAC;QACd,mBAAmB;QACnB,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;QACjC,MAAM,CAAC,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC;IAChC,CAAC;IAED,MAAM,CAAC,0BAA0B,CAAC,OAAiB,EAAE,IAAY;QAC/D,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,mBAAmB;QACnB,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,SAAS,IAAI,IAAI,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QACzD,SAAS,GAAG,SAAS,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACzC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACjC,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IAED,MAAM,CAAC,wBAAwB,CAC3B,OAAiB,EAAE,KAAa,EAAE,OAAiB,EAAE,KAAa;QACpE,4DAA4D;QAC5D,IAAI,WAAW,GAAG,CAAC,CAAC;QACpB,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;YACxC,WAAW,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC;YAC3D,UAAU,IAAI,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,CAAC,WAAW,GAAG,UAAU,CAAC;IAClC,CAAC;CACF;AAhCD,8BAgCC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport class Statistic {\n  static calculateCoefficientOfVariation(sample: number[], mean: number) {\n    return Statistic.calculateStandardDeviation(sample, mean) / mean * 100;\n  }\n\n  static calculateMean(samples: number[]) {\n    let total = 0;\n    // TODO: use reduce\n    samples.forEach(x => total += x);\n    return total / samples.length;\n  }\n\n  static calculateStandardDeviation(samples: number[], mean: number) {\n    let deviation = 0;\n    // TODO: use reduce\n    samples.forEach(x => deviation += Math.pow(x - mean, 2));\n    deviation = deviation / (samples.length);\n    deviation = Math.sqrt(deviation);\n    return deviation;\n  }\n\n  static calculateRegressionSlope(\n      xValues: number[], xMean: number, yValues: number[], yMean: number) {\n    // See http://en.wikipedia.org/wiki/Simple_linear_regression\n    let dividendSum = 0;\n    let divisorSum = 0;\n    for (let i = 0; i < xValues.length; i++) {\n      dividendSum += (xValues[i] - xMean) * (yValues[i] - yMean);\n      divisorSum += Math.pow(xValues[i] - xMean, 2);\n    }\n    return dividendSum / divisorSum;\n  }\n}\n"]}