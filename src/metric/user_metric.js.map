{"version":3,"file":"user_metric.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/metric/user_metric.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,wCAAiE;AAEjE,sDAA0C;AAC1C,sCAAiC;AACjC,8DAAuD;AAGvD,IAAa,UAAU,kBAAvB,gBAAwB,SAAQ,eAAM;IAIpC,YAC0C,YAAqC,EACnE,UAA4B;QACtC,KAAK,EAAE,CAAC;QAFgC,iBAAY,GAAZ,YAAY,CAAyB;QACnE,eAAU,GAAV,UAAU,CAAkB;IAExC,CAAC;IAED;;OAEG;IACH,YAAY,KAAmB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAE9D;;OAEG;IACH,UAAU,CAAC,OAAgB;QACzB,IAAI,OAA8B,CAAC;QACnC,IAAI,MAA4B,CAAC;QACjC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE;YACvC,OAAO,GAAG,GAAG,CAAC;YACd,MAAM,GAAG,GAAG,CAAC;QACf,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC;QAChC,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QAE7C;YACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;iBACzE,IAAI,CAAC,CAAC,MAAa,EAAE,EAAE;gBACtB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC;oBAC7C,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,iBAAiB,IAAI,EAAE,CAAC,CAAC,CAAC;yBACzE,IAAI,CAAC,CAAC,CAAQ,EAAE,EAAE;wBACjB,MAAM,GAAG,GAAuB,EAAE,CAAC;wBACnC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC;4BAC7C,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;wBAC5B,CAAC;wBACD,OAAO,CAAC,GAAG,CAAC,CAAC;oBACf,CAAC,EAAE,MAAM,CAAC,CAAC;gBACjB,CAAC;gBAAC,IAAI,CAAC,CAAC;oBACD,UAAU,CAAC,iBAAiB,EAAE,GAAG,CAAC,CAAC;gBAC1C,CAAC;YACH,CAAC,EAAE,MAAM,CAAC,CAAC;QACjB,CAAC;QACD,iBAAiB,EAAE,CAAC;QACpB,MAAM,CAAC,OAAO,CAAC;IACjB,CAAC;IAED;;;OAGG;IACH,QAAQ,KAA2B,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;CAC/D,CAAA;AArDQ,oBAAS,GACM,CAAC,EAAC,OAAO,EAAE,YAAU,EAAE,IAAI,EAAE,CAAC,wBAAO,CAAC,YAAY,EAAE,qCAAgB,CAAC,EAAC,CAAC,CAAC;AAFnF,UAAU;IADtB,iBAAU,EAAE;IAMN,mBAAA,aAAM,CAAC,wBAAO,CAAC,YAAY,CAAC,CAAA;qDACT,qCAAgB;GAN7B,UAAU,CAsDtB;AAtDY,gCAAU","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, StaticProvider} from '@angular/core';\n\nimport {Options} from '../common_options';\nimport {Metric} from '../metric';\nimport {WebDriverAdapter} from '../web_driver_adapter';\n\n@Injectable()\nexport class UserMetric extends Metric {\n  static PROVIDERS =\n      <StaticProvider[]>[{provide: UserMetric, deps: [Options.USER_METRICS, WebDriverAdapter]}];\n\n  constructor(\n      @Inject(Options.USER_METRICS) private _userMetrics: {[key: string]: string},\n      private _wdAdapter: WebDriverAdapter) {\n    super();\n  }\n\n  /**\n   * Starts measuring\n   */\n  beginMeasure(): Promise<any> { return Promise.resolve(true); }\n\n  /**\n   * Ends measuring.\n   */\n  endMeasure(restart: boolean): Promise<{[key: string]: any}> {\n    let resolve: (result: any) => void;\n    let reject: (error: any) => void;\n    const promise = new Promise((res, rej) => {\n      resolve = res;\n      reject = rej;\n    });\n    const adapter = this._wdAdapter;\n    const names = Object.keys(this._userMetrics);\n\n    function getAndClearValues() {\n      Promise.all(names.map(name => adapter.executeScript(`return window.${name}`)))\n          .then((values: any[]) => {\n            if (values.every(v => typeof v === 'number')) {\n              Promise.all(names.map(name => adapter.executeScript(`delete window.${name}`)))\n                  .then((_: any[]) => {\n                    const map: {[k: string]: any} = {};\n                    for (let i = 0, n = names.length; i < n; i++) {\n                      map[names[i]] = values[i];\n                    }\n                    resolve(map);\n                  }, reject);\n            } else {\n              <any>setTimeout(getAndClearValues, 100);\n            }\n          }, reject);\n    }\n    getAndClearValues();\n    return promise;\n  }\n\n  /**\n   * Describes the metrics provided by this metric implementation.\n   * (e.g. units, ...)\n   */\n  describe(): {[key: string]: any} { return this._userMetrics; }\n}\n"]}