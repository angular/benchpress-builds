{"version":3,"file":"size_validator.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/validator/size_validator.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;;AAEH,wCAAiE;AAGjE,4CAAuC;AAEvC;;GAEG;AAEH,IAAa,aAAa,qBAA1B,mBAA2B,SAAQ,qBAAS;IAO1C,YAAuD,WAAmB;QAAI,KAAK,EAAE,CAAC;QAA/B,gBAAW,GAAX,WAAW,CAAQ;IAAa,CAAC;IAExF,QAAQ,KAA2B,MAAM,CAAC,EAAC,YAAY,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC,CAAC,CAAC;IAE7E,QAAQ,CAAC,cAA+B;QACtC,EAAE,CAAC,CAAC,cAAc,CAAC,MAAM,IAAI,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,cAAc,CAAC,KAAK,CAAC,cAAc,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,EAAE,cAAc,CAAC,MAAM,CAAC,CAAC;QAC/F,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;IACH,CAAC;CACF,CAAA;AAjBQ,yBAAW,GAAG,IAAI,qBAAc,CAAC,0BAA0B,CAAC,CAAC;AAC7D,uBAAS,GAAG;IACjB,EAAC,OAAO,EAAE,eAAa,EAAE,IAAI,EAAE,CAAC,eAAa,CAAC,WAAW,CAAC,EAAC;IAC3D,EAAC,OAAO,EAAE,eAAa,CAAC,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAC;CACnD,CAAC;AALS,aAAa;IADzB,iBAAU,EAAE;IAQE,WAAA,aAAM,CAAC,eAAa,CAAC,WAAW,CAAC,CAAA;;GAPnC,aAAa,CAkBzB;AAlBY,sCAAa","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {MeasureValues} from '../measure_values';\nimport {Validator} from '../validator';\n\n/**\n * A validator that waits for the sample to have a certain size.\n */\n@Injectable()\nexport class SizeValidator extends Validator {\n  static SAMPLE_SIZE = new InjectionToken('SizeValidator.sampleSize');\n  static PROVIDERS = [\n    {provide: SizeValidator, deps: [SizeValidator.SAMPLE_SIZE]},\n    {provide: SizeValidator.SAMPLE_SIZE, useValue: 10}\n  ];\n\n  constructor(@Inject(SizeValidator.SAMPLE_SIZE) private _sampleSize: number) { super(); }\n\n  describe(): {[key: string]: any} { return {'sampleSize': this._sampleSize}; }\n\n  validate(completeSample: MeasureValues[]): MeasureValues[]|null {\n    if (completeSample.length >= this._sampleSize) {\n      return completeSample.slice(completeSample.length - this._sampleSize, completeSample.length);\n    } else {\n      return null;\n    }\n  }\n}\n"]}