{"version":3,"file":"multi_reporter.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/reporter/multi_reporter.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,wCAAuD;AAGvD,0CAAqC;AAErC,mBAA2B,SAAQ,mBAAQ;IAgBzC,YAAoB,UAAsB;QAAI,KAAK,EAAE,CAAC;QAAlC,eAAU,GAAV,UAAU,CAAY;IAAa,CAAC;IAfxD,MAAM,CAAC,WAAW,CAAC,WAAkB;QACnC,MAAM,CAAC;YACL;gBACE,OAAO,EAAE,SAAS;gBAClB,UAAU,EAAE,CAAC,QAAkB,KAAK,WAAW,CAAC,GAAG,CAAC,KAAK,IAAI,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACjF,IAAI,EAAE,CAAC,eAAQ,CAAC;aACjB;YACD;gBACE,OAAO,EAAE,aAAa;gBACtB,UAAU,EAAE,CAAC,QAAoB,KAAK,IAAI,aAAa,CAAC,QAAQ,CAAC;gBACjE,IAAI,EAAE,CAAC,SAAS,CAAC;aAClB;SACF,CAAC;IACJ,CAAC;IAID,mBAAmB,CAAC,MAAqB;QACvC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,IAAI,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5F,CAAC;IAED,YAAY,CAAC,cAA+B,EAAE,WAA4B;QACxE,MAAM,CAAC,OAAO,CAAC,GAAG,CACd,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,QAAQ,IAAI,QAAQ,CAAC,YAAY,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;IAC3F,CAAC;CACF;AA1BD,sCA0BC;AAED,MAAM,SAAS,GAAG,IAAI,qBAAc,CAAC,wBAAwB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, Injector} from '@angular/core';\n\nimport {MeasureValues} from '../measure_values';\nimport {Reporter} from '../reporter';\n\nexport class MultiReporter extends Reporter {\n  static provideWith(childTokens: any[]): any[] {\n    return [\n      {\n        provide: _CHILDREN,\n        useFactory: (injector: Injector) => childTokens.map(token => injector.get(token)),\n        deps: [Injector],\n      },\n      {\n        provide: MultiReporter,\n        useFactory: (children: Reporter[]) => new MultiReporter(children),\n        deps: [_CHILDREN]\n      }\n    ];\n  }\n\n  constructor(private _reporters: Reporter[]) { super(); }\n\n  reportMeasureValues(values: MeasureValues): Promise<any[]> {\n    return Promise.all(this._reporters.map(reporter => reporter.reportMeasureValues(values)));\n  }\n\n  reportSample(completeSample: MeasureValues[], validSample: MeasureValues[]): Promise<any[]> {\n    return Promise.all(\n        this._reporters.map(reporter => reporter.reportSample(completeSample, validSample)));\n  }\n}\n\nconst _CHILDREN = new InjectionToken('MultiReporter.children');\n"]}