{"version":3,"file":"multi_metric.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/metric/multi_metric.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;AAEH,wCAAuD;AAEvD,sCAAiC;AAEjC,iBAAyB,SAAQ,eAAM;IAgBrC,YAAoB,QAAkB;QAAI,KAAK,EAAE,CAAC;QAA9B,aAAQ,GAAR,QAAQ,CAAU;IAAa,CAAC;IAfpD,MAAM,CAAC,WAAW,CAAC,WAAkB;QACnC,MAAM,CAAC;YACL;gBACE,OAAO,EAAE,SAAS;gBAClB,UAAU,EAAE,CAAC,QAAkB,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACjF,IAAI,EAAE,CAAC,eAAQ,CAAC;aACjB;YACD;gBACE,OAAO,EAAE,WAAW;gBACpB,UAAU,EAAE,CAAC,QAAkB,EAAE,EAAE,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC;gBAC7D,IAAI,EAAE,CAAC,SAAS,CAAC;aAClB;SACF,CAAC;IACJ,CAAC;IAID;;OAEG;IACH,YAAY;QACV,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;IACzE,CAAC;IAED;;;;OAIG;IACH,UAAU,CAAC,OAAgB;QACzB,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;aACtE,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,eAAe,CAAM,MAAM,CAAC,CAAC,CAAC;IACpD,CAAC;IAED;;;OAGG;IACH,QAAQ;QACN,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC3E,CAAC;CACF;AA1CD,kCA0CC;AAED,yBAAyB,IAA+B;IACtD,MAAM,MAAM,GAA4B,EAAE,CAAC;IAC3C,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1F,MAAM,CAAC,MAAM,CAAC;AAChB,CAAC;AAED,MAAM,SAAS,GAAG,IAAI,qBAAc,CAAC,sBAAsB,CAAC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken, Injector} from '@angular/core';\n\nimport {Metric} from '../metric';\n\nexport class MultiMetric extends Metric {\n  static provideWith(childTokens: any[]): any[] {\n    return [\n      {\n        provide: _CHILDREN,\n        useFactory: (injector: Injector) => childTokens.map(token => injector.get(token)),\n        deps: [Injector]\n      },\n      {\n        provide: MultiMetric,\n        useFactory: (children: Metric[]) => new MultiMetric(children),\n        deps: [_CHILDREN]\n      }\n    ];\n  }\n\n  constructor(private _metrics: Metric[]) { super(); }\n\n  /**\n   * Starts measuring\n   */\n  beginMeasure(): Promise<any> {\n    return Promise.all(this._metrics.map(metric => metric.beginMeasure()));\n  }\n\n  /**\n   * Ends measuring and reports the data\n   * since the begin call.\n   * @param restart: Whether to restart right after this.\n   */\n  endMeasure(restart: boolean): Promise<{[key: string]: any}> {\n    return Promise.all(this._metrics.map(metric => metric.endMeasure(restart)))\n        .then(values => mergeStringMaps(<any>values));\n  }\n\n  /**\n   * Describes the metrics provided by this metric implementation.\n   * (e.g. units, ...)\n   */\n  describe(): {[key: string]: any} {\n    return mergeStringMaps(this._metrics.map((metric) => metric.describe()));\n  }\n}\n\nfunction mergeStringMaps(maps: {[key: string]: string}[]): {[key: string]: string} {\n  const result: {[key: string]: string} = {};\n  maps.forEach(map => { Object.keys(map).forEach(prop => { result[prop] = map[prop]; }); });\n  return result;\n}\n\nconst _CHILDREN = new InjectionToken('MultiMetric.children');\n"]}