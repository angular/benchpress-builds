{"version":3,"file":"json_file_reporter.js","sourceRoot":"/home/travis/build/angular/angular/packages/benchpress/","sources":["src/reporter/json_file_reporter.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;AAEH,wCAAiE;AAEjE,sDAA0C;AAE1C,0CAAqC;AACrC,8DAAwD;AAExD,iCAAgD;AAGhD;;GAEG;AAEH,IAAa,gBAAgB,wBAA7B,sBAA8B,SAAQ,mBAAQ;IAU5C,YACY,YAA+B,EAAyC,KAAa,EACzD,UAAoB,EAC3B,IAAc;QAC7C,KAAK,EAAE,CAAC;QAHE,iBAAY,GAAZ,YAAY,CAAmB;QAAyC,UAAK,GAAL,KAAK,CAAQ;QACzD,eAAU,GAAV,UAAU,CAAU;QAC3B,SAAI,GAAJ,IAAI,CAAU;IAE/C,CAAC;IAED,mBAAmB,CAAC,aAA4B,IAAkB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAEjG,YAAY,CAAC,cAA+B,EAAE,WAA4B;QACxE,MAAM,KAAK,GAA4B,EAAE,CAAC;QAC1C,kBAAW,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;YAC5D,KAAK,CAAC,UAAU,CAAC,GAAG,kBAAW,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;QACH,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAC1B;YACE,aAAa,EAAE,IAAI,CAAC,YAAY;YAChC,OAAO,EAAE,KAAK;YACd,gBAAgB,EAAE,cAAc;YAChC,aAAa,EAAE,WAAW;SAC3B,EACD,IAAI,EAAE,CAAC,CAAC,CAAC;QACb,MAAM,QAAQ,GAAG,GAAG,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,OAAO,CAAC;QACvF,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IAC5C,CAAC;CACF,CAAA;AAlCQ,qBAAI,GAAG,IAAI,qBAAc,CAAC,uBAAuB,CAAC,CAAC;AACnD,0BAAS,GAAG;IACjB;QACE,OAAO,EAAE,kBAAgB;QACzB,IAAI,EAAE,CAAC,sCAAiB,EAAE,kBAAgB,CAAC,IAAI,EAAE,wBAAO,CAAC,UAAU,EAAE,wBAAO,CAAC,GAAG,CAAC;KAClF;IACD,EAAC,OAAO,EAAE,kBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAC;CAChD,CAAC;AARS,gBAAgB;IAD5B,iBAAU,EAAE;IAYmC,mBAAA,aAAM,CAAC,kBAAgB,CAAC,IAAI,CAAC,CAAA;IACtE,mBAAA,aAAM,CAAC,wBAAO,CAAC,UAAU,CAAC,CAAA;IAC1B,mBAAA,aAAM,CAAC,wBAAO,CAAC,GAAG,CAAC,CAAA;6CAFE,sCAAiB,UACS,QAAQ;QACrB,QAAQ;GAbpC,gBAAgB,CAmC5B;AAnCY,4CAAgB","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken} from '@angular/core';\n\nimport {Options} from '../common_options';\nimport {MeasureValues} from '../measure_values';\nimport {Reporter} from '../reporter';\nimport {SampleDescription} from '../sample_description';\n\nimport {formatStats, sortedProps} from './util';\n\n\n/**\n * A reporter that writes results into a json file.\n */\n@Injectable()\nexport class JsonFileReporter extends Reporter {\n  static PATH = new InjectionToken('JsonFileReporter.path');\n  static PROVIDERS = [\n    {\n      provide: JsonFileReporter,\n      deps: [SampleDescription, JsonFileReporter.PATH, Options.WRITE_FILE, Options.NOW]\n    },\n    {provide: JsonFileReporter.PATH, useValue: '.'}\n  ];\n\n  constructor(\n      private _description: SampleDescription, @Inject(JsonFileReporter.PATH) private _path: string,\n      @Inject(Options.WRITE_FILE) private _writeFile: Function,\n      @Inject(Options.NOW) private _now: Function) {\n    super();\n  }\n\n  reportMeasureValues(measureValues: MeasureValues): Promise<any> { return Promise.resolve(null); }\n\n  reportSample(completeSample: MeasureValues[], validSample: MeasureValues[]): Promise<any> {\n    const stats: {[key: string]: string} = {};\n    sortedProps(this._description.metrics).forEach((metricName) => {\n      stats[metricName] = formatStats(validSample, metricName);\n    });\n    const content = JSON.stringify(\n        {\n          'description': this._description,\n          'stats': stats,\n          'completeSample': completeSample,\n          'validSample': validSample,\n        },\n        null, 2);\n    const filePath = `${this._path}/${this._description.id}_${this._now().getTime()}.json`;\n    return this._writeFile(filePath, content);\n  }\n}\n"]}